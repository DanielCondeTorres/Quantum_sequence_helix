import numpy as np

# Mapping de 3 letras â†’ 1 letra
aa_map = {
    "ALA": "A", "ARG": "R", "ASN": "N", "ASP": "D", "CYS": "C",
    "GLN": "Q", "GLU": "E", "GLY": "G", "HIS": "H", "ILE": "I",
    "LEU": "L", "LYS": "K", "MET": "M", "PHE": "F", "PRO": "P",
    "SER": "S", "THR": "T", "TRP": "W", "TYR": "Y", "VAL": "V"
}

# Amino acid order (3 letras, como en la imagen original)
aa_order_3 = [
    "ALA", "ARG", "ASN", "ASP", "CYS", "GLN", "GLU", "GLY", "HIS", "ILE",
    "LEU", "LYS", "MET", "PHE", "PRO", "SER", "THR", "TRP", "TYR", "VAL"
]

# Convertimos a 1 letra
aa_order_1 = [aa_map[aa] for aa in aa_order_3]

# Matriz (igual que antes)
M_H = [
    [2.734, 1.648, 1.224, 1.769, 1.448, 1.777, 1.900, 1.155, 1.238, 1.275, 1.575, 1.297, 1.580, 1.143, 1.276, 1.484, 1.297, 1.342, 1.069, 1.197],
    [1.724, 1.466, 1.013, 1.804, 0.893, 1.483, 2.523, 0.770, 1.107, 1.117, 1.374, 1.016, 1.244, 0.918, 1.000, 1.244, 1.192, 1.244, 1.206, 1.063],
    [0.817, 0.808, 0.992, 0.776, 0.445, 0.887, 1.498, 0.506, 0.729, 0.671, 0.926, 0.846, 0.809, 0.534, 0.575, 0.738, 0.684, 0.726, 0.749, 0.642],
    [0.721, 1.197, 0.669, 0.729, 0.445, 0.831, 1.027, 0.570, 0.623, 0.519, 0.551, 0.502, 0.465, 0.343, 0.410, 0.682, 0.536, 0.419, 0.383, 0.356],
    [1.221, 0.697, 0.873, 0.775, 1.800, 0.822, 0.794, 0.606, 1.088, 1.640, 1.705, 0.566, 1.795, 1.884, 0.405, 0.888, 1.036, 1.803, 1.393, 1.322],
    [1.524, 1.593, 1.329, 1.557, 0.724, 1.943, 2.144, 0.602, 1.148, 0.856, 1.205, 1.264, 1.252, 0.977, 0.986, 1.034, 0.763, 0.937, 0.953, 0.723],
    [1.326, 2.116, 1.066, 1.292, 0.666, 2.046, 1.806, 0.512, 0.900, 0.856, 1.008, 2.264, 0.994, 0.644, 0.855, 0.863, 0.977, 0.730, 0.783, 0.737],
    [0.764, 0.517, 0.338, 0.438, 0.368, 0.472, 0.556, 0.370, 0.440, 0.369, 0.498, 0.372, 0.391, 0.393, 0.383, 0.453, 0.384, 0.447, 0.346, 0.390],
    [1.114, 0.902, 0.663, 0.820, 0.855, 0.980, 1.146, 0.453, 0.913, 0.947, 1.201, 0.724, 1.206, 1.089, 0.492, 0.845, 0.821, 1.246, 1.196, 0.820],
    [1.251, 0.983, 0.935, 0.927, 1.051, 1.045, 1.063, 0.550, 1.017, 1.690, 1.290, 0.928, 1.719, 1.165, 0.531, 1.010, 1.332, 1.181, 1.162, 1.386],
    [1.782, 1.404, 1.075, 1.201, 1.480, 1.429, 2.151, 0.825, 1.264, 1.946, 2.268, 1.077, 2.031, 1.637, 0.726, 1.211, 1.598, 1.434, 1.526, 1.793],
    [1.316, 1.005, 1.076, 1.165, 0.716, 1.428, 1.490, 0.581, 0.883, 0.702, 1.082, 0.832, 0.822, 0.692, 0.691, 0.808, 0.670, 0.826, 0.806, 0.725],
    [1.637, 1.348, 1.325, 1.467, 1.574, 1.813, 2.491, 0.842, 1.232, 0.991, 1.671, 1.228, 1.578, 1.050, 1.105, 1.216, 1.239, 1.328, 1.173, 1.348],
    [1.301, 0.870, 0.822, 0.988, 1.057, 1.087, 1.015, 0.590, 0.749, 1.311, 1.496, 0.817, 1.571, 1.328, 0.516, 1.019, 0.999, 1.309, 1.024, 1.004],
    [0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000],
    [1.036, 0.799, 0.741, 0.859, 0.702, 0.965, 1.344, 0.520, 0.909, 0.609, 1.091, 0.739, 0.876, 0.787, 0.804, 0.885, 0.932, 0.937, 0.795, 0.563],
    [0.799, 0.771, 0.689, 0.815, 0.602, 0.941, 1.055, 0.491, 0.766, 0.736, 0.692, 0.752, 0.682, 0.786, 0.719, 0.796, 0.776, 0.819, 0.677, 0.694],
    [1.218, 0.700, 0.746, 0.808, 0.822, 1.261, 1.717, 0.554, 0.963, 0.988, 1.200, 0.985, 1.150, 0.986, 0.878, 0.982, 1.116, 1.174, 0.971, 0.951],
    [1.329, 0.876, 0.841, 0.882, 0.918, 0.976, 0.974, 0.507, 0.901, 0.754, 0.951, 0.865, 1.429, 1.391, 0.896, 0.876, 0.875, 1.197, 1.074, 0.952],
    [1.107, 0.728, 0.699, 0.756, 0.814, 0.704, 0.763, 0.514, 0.994, 1.167, 1.238, 0.553, 1.139, 1.283, 0.741, 0.712, 0.995, 1.053, 1.072, 1.062]
]

# Guardar con encabezado de 1 letra
output_file = "helix_pairs_prop.txt"

with open(output_file, "w") as f:
    f.write("\t".join(aa_order_1) + "\n")
    for row in M_H:
        f.write("\t".join([f"{val:.3f}" for val in row]) + "\n")

print("Archivo generado:", output_file)

